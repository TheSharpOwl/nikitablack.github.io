<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simply about complex</title>
    <link>http://nikitablack.github.io/</link>
    <description>
      RSS Feed for Simply about complex
    </description>
    <atom:link href="https://raw.githubusercontent.com/nikitablack/nikitablack.github.io/master/rss/feed.rss" rel="self" type="application/rss+xml" />
    
    <item>
      <title>std::function - to bind or not to bind?</title>
      <link>https://nikitablack.github.io/2016/05/24/stdfunction-to-bind-or-not-to-bind.html</link>
      <pubDate>Wed, 24 May 2016 22:00:00 +0000</pubDate>
      <guid isPermaLink="true">https://nikitablack.github.io/2016/05/24/stdfunction-to-bind-or-not-to-bind.html</guid>
      <description>In my previous post about delegates I wrote how to bind a member function to std::function. There was a lot of template magic involved in order to pass the correct number of placeholders.</description>
    </item>
    
    <item>
      <title>Small template trick - getting sizes of arbitrary numbers of types.</title>
      <link>https://nikitablack.github.io/2016/05/11/Get-sizes-of-arbitrary-types.html</link>
      <pubDate>Wed, 11 May 2016 22:00:00 +0100</pubDate>
      <guid isPermaLink="true">https://nikitablack.github.io/2016/05/11/Get-sizes-of-arbitrary-types.html</guid>
      <description>The more I work with c++ and template programming in particular, the more I love it. No, seriously - we have a language inside another language which allows us to create beautiful constructs.</description>
    </item>
    
    <item>
      <title>std::function as delegate</title>
      <link>https://nikitablack.github.io/2016/04/26/stdfunction-as-delegate.html</link>
      <pubDate>Wed, 27 Apr 2016 12:00:00 +0100</pubDate>
      <guid isPermaLink="true">https://nikitablack.github.io/2016/04/26/stdfunction-as-delegate.html</guid>
      <description>After my previous post some people asked why did I invent what was invented already? Why did I try to write another std::function?</description>
    </item>
    
    <item>
      <title>Generic C++ delegates</title>
      <link>https://nikitablack.github.io/2016/04/12/Generic-C-delegates.html</link>
      <pubDate>Tue, 12 Apr 2016 10:00:00 +0100</pubDate>
      <guid isPermaLink="true">https://nikitablack.github.io/2016/04/12/Generic-C-delegates.html</guid>
      <description>I like modular programming - the style where each separate part of the functionality knows nothing about any other part.</description>
    </item>
    
    <item>
      <title>Call a function from the string name and arguments</title>
      <link>https://nikitablack.github.io/2016/02/21/Call-a-function-from-the-string-name-and-arguments.html</link>
      <pubDate>Sun, 21 Feb 2016 10:00:00 +0100</pubDate>
      <guid isPermaLink="true">https://nikitablack.github.io/2016/02/21/Call-a-function-from-the-string-name-and-arguments.html</guid>
      <description>Recently I had an interesting task on my work - a cheat system for a game. All the system should do is to call functions during apllication run with console commands (game console).</description>
    </item>
</channel>
</rss>
